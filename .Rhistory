df_list <- lapply(c(4, 34, 50), function(i) {
request <- GET(url = path,
query = list(
token = token,
combined_address = scv$customer_address[i]
)) %>%
content(as = "text", encoding = "UTF-8") %>%
fromJSON(flatten = FALSE) %>%
simple_rapply(function(x) if (is.null(x)) NA else x)
if (length(request) < 3) {
df <- data.frame(matrix(data = "error", nrow = 1, ncol = 10,  dimnames = list(c("row"), c("address", "year_built", "bed_count", "bath_count", "heating_type", "heatfuel_type", "ac_type", "area_sqft", "prop_value", "own_occupied"))))
} else if (is.na(request$data)) {
df <- data.frame(matrix(data = request$warnings$code, nrow = 1, ncol = 10, dimnames = list(c("row"), c("address", "year_built", "bed_count", "bath_count", "heating_type", "heatfuel_type", "ac_type", "area_sqft", "prop_value", "own_occupied"))))
} else {
df <- request$data[c(2, 4, 5, 9)] %>%
unlist() %>%
t() %>%
data.frame() %>%
mutate(address = paste(address.formatted_street_address, address.city, address.state, address.zip_code, sep = ", "))
print(df$address)
if (is.na(request$data$structure)) {
df <- df %>%
mutate(structure.year_built = NA, structure.beds_count = NA, structure.baths = NA, structure.heating_type = NA, structure.heating_fuel_type = NA, structure.air_conditioning_type = NA, structure.total_area_sq_ft = NA)
}
if (is.na(request$data$valuation)) {
df <- df %>%
mutate(valuation.value = NA)
}
if (is.na(request$data$owner)) {
df <- df %>%
mutate(owner.owner_occupied = NA)
}
df <- df %>% select(c(address,
year_built = structure.year_built,
bed_count = structure.beds_count,
bath_count = structure.baths,
heating_type = structure.heating_type,
heatfuel_type = structure.heating_fuel_type,
ac_type = structure.air_conditioning_type,
area_sqft = structure.total_area_sq_ft,
prop_value = valuation.value,
own_occupied = owner.owner_occupied))
}
return(df)
})
estated_scv_select <- do.call(smartbind, df_list)
View(estated_scv_select)
write.csv(estated_scv_select, "data/processed/estated_scv_select.csv")
ieua <- read.csv("data/processed/turf_gc.csv")
View(ieua)
path <- "https://apis.estated.com/v4/property"
token <- "6dEsc7UMjstJ1PWq6iYXscIcBmIpJn"
# creating function to convert NULL values to NA values
simple_rapply <- function(x, fn)
{
if(is.list(x))
{
lapply(x, simple_rapply, fn)
} else
{
fn(x)
}
df_list <- lapply(1:5, function(i) {
request <- GET(url = path,
query = list(
token = token,
street_address = ieua$installation_address[i],
city = ieua$installation_city[i],
state = ieua$installation_state[i],
zip_code = ieua$installation_zip[i]
)) %>%
content(as = "text", encoding = "UTF-8") %>%
fromJSON(flatten = FALSE) %>%
simple_rapply(function(x) if (is.null(x)) NA else x)
if (length(request) < 3) {
df <- data.frame(matrix(data = "error", nrow = 1, ncol = 10,  dimnames = list(c("row"), c("address", "year_built", "bed_count", "bath_count", "heating_type", "heatfuel_type", "ac_type", "area_sqft", "prop_value", "own_occupied"))))
} else if (is.na(request$data)) {
df <- data.frame(matrix(data = request$warnings$code, nrow = 1, ncol = 10, dimnames = list(c("row"), c("address", "year_built", "bed_count", "bath_count", "heating_type", "heatfuel_type", "ac_type", "area_sqft", "prop_value", "own_occupied"))))
} else {
df <- request$data[c(2, 4, 5, 9)] %>%
unlist() %>%
t() %>%
data.frame() %>%
mutate(address = paste(address.formatted_street_address, address.city, address.state, address.zip_code, sep = ", "))
print(df$address)
if (is.na(request$data$structure)) {
df <- df %>%
mutate(structure.year_built = NA, structure.beds_count = NA, structure.baths = NA, structure.heating_type = NA, structure.heating_fuel_type = NA, structure.air_conditioning_type = NA, structure.total_area_sq_ft = NA)
}
if (is.na(request$data$valuation)) {
df <- df %>%
mutate(valuation.value = NA)
}
if (is.na(request$data$owner)) {
df <- df %>%
mutate(owner.owner_occupied = NA)
}
df <- df %>% select(c(address,
year_built = structure.year_built,
bed_count = structure.beds_count,
bath_count = structure.baths,
heating_type = structure.heating_type,
heatfuel_type = structure.heating_fuel_type,
ac_type = structure.air_conditioning_type,
area_sqft = structure.total_area_sq_ft,
prop_value = valuation.value,
own_occupied = owner.owner_occupied))
}
return(df)
})
df_list <- lapply(1:5, function(i) {
request <- GET(url = path,
query = list(
token = token,
street_address = ieua$installation_address[i],
city = ieua$installation_city[i],
state = ieua$installation_state[i],
zip_code = ieua$installation_zip[i]
)) %>%
content(as = "text", encoding = "UTF-8") %>%
fromJSON(flatten = FALSE) %>%
simple_rapply(function(x) if (is.null(x)) NA else x)
if (length(request) < 3) {
df <- data.frame(matrix(data = "error", nrow = 1, ncol = 10,  dimnames = list(c("row"), c("address", "year_built", "bed_count", "bath_count", "heating_type", "heatfuel_type", "ac_type", "area_sqft", "prop_value", "own_occupied"))))
} else if (is.na(request$data)) {
df <- data.frame(matrix(data = request$warnings$code, nrow = 1, ncol = 10, dimnames = list(c("row"), c("address", "year_built", "bed_count", "bath_count", "heating_type", "heatfuel_type", "ac_type", "area_sqft", "prop_value", "own_occupied"))))
} else {
df <- request$data[c(2, 4, 5, 9)] %>%
unlist() %>%
t() %>%
data.frame() %>%
mutate(address = paste(address.formatted_street_address, address.city, address.state, address.zip_code, sep = ", "))
print(df$address)
if (is.na(request$data$structure)) {
df <- df %>%
mutate(structure.year_built = NA, structure.beds_count = NA, structure.baths = NA, structure.heating_type = NA, structure.heating_fuel_type = NA, structure.air_conditioning_type = NA, structure.total_area_sq_ft = NA)
}
if (is.na(request$data$valuation)) {
df <- df %>%
mutate(valuation.value = NA)
}
if (is.na(request$data$owner)) {
df <- df %>%
mutate(owner.owner_occupied = NA)
}
df <- df %>% select(c(address,
year_built = structure.year_built,
bed_count = structure.beds_count,
bath_count = structure.baths,
heating_type = structure.heating_type,
heatfuel_type = structure.heating_fuel_type,
ac_type = structure.air_conditioning_type,
area_sqft = structure.total_area_sq_ft,
prop_value = valuation.value,
own_occupied = owner.owner_occupied))
}
return(df)
})
library(tidyverse); library(httr); library(jsonlite); library(gtools)
df_list <- lapply(1:5, function(i) {
request <- GET(url = path,
query = list(
token = token,
street_address = ieua$installation_address[i],
city = ieua$installation_city[i],
state = ieua$installation_state[i],
zip_code = ieua$installation_zip[i]
)) %>%
content(as = "text", encoding = "UTF-8") %>%
fromJSON(flatten = FALSE) %>%
simple_rapply(function(x) if (is.null(x)) NA else x)
if (length(request) < 3) {
df <- data.frame(matrix(data = "error", nrow = 1, ncol = 10,  dimnames = list(c("row"), c("address", "year_built", "bed_count", "bath_count", "heating_type", "heatfuel_type", "ac_type", "area_sqft", "prop_value", "own_occupied"))))
} else if (is.na(request$data)) {
df <- data.frame(matrix(data = request$warnings$code, nrow = 1, ncol = 10, dimnames = list(c("row"), c("address", "year_built", "bed_count", "bath_count", "heating_type", "heatfuel_type", "ac_type", "area_sqft", "prop_value", "own_occupied"))))
} else {
df <- request$data[c(2, 4, 5, 9)] %>%
unlist() %>%
t() %>%
data.frame() %>%
mutate(address = paste(address.formatted_street_address, address.city, address.state, address.zip_code, sep = ", "))
print(df$address)
if (is.na(request$data$structure)) {
df <- df %>%
mutate(structure.year_built = NA, structure.beds_count = NA, structure.baths = NA, structure.heating_type = NA, structure.heating_fuel_type = NA, structure.air_conditioning_type = NA, structure.total_area_sq_ft = NA)
}
if (is.na(request$data$valuation)) {
df <- df %>%
mutate(valuation.value = NA)
}
if (is.na(request$data$owner)) {
df <- df %>%
mutate(owner.owner_occupied = NA)
}
df <- df %>% select(c(address,
year_built = structure.year_built,
bed_count = structure.beds_count,
bath_count = structure.baths,
heating_type = structure.heating_type,
heatfuel_type = structure.heating_fuel_type,
ac_type = structure.air_conditioning_type,
area_sqft = structure.total_area_sq_ft,
prop_value = valuation.value,
own_occupied = owner.owner_occupied))
}
return(df)
})
# creating function to convert NULL values to NA values
simple_rapply <- function(x, fn)
{
if(is.list(x))
{
lapply(x, simple_rapply, fn)
} else
{
fn(x)
}
}
df_list <- lapply(1:5, function(i) {
request <- GET(url = path,
query = list(
token = token,
street_address = ieua$installation_address[i],
city = ieua$installation_city[i],
state = ieua$installation_state[i],
zip_code = ieua$installation_zip[i]
)) %>%
content(as = "text", encoding = "UTF-8") %>%
fromJSON(flatten = FALSE) %>%
simple_rapply(function(x) if (is.null(x)) NA else x)
if (length(request) < 3) {
df <- data.frame(matrix(data = "error", nrow = 1, ncol = 10,  dimnames = list(c("row"), c("address", "year_built", "bed_count", "bath_count", "heating_type", "heatfuel_type", "ac_type", "area_sqft", "prop_value", "own_occupied"))))
} else if (is.na(request$data)) {
df <- data.frame(matrix(data = request$warnings$code, nrow = 1, ncol = 10, dimnames = list(c("row"), c("address", "year_built", "bed_count", "bath_count", "heating_type", "heatfuel_type", "ac_type", "area_sqft", "prop_value", "own_occupied"))))
} else {
df <- request$data[c(2, 4, 5, 9)] %>%
unlist() %>%
t() %>%
data.frame() %>%
mutate(address = paste(address.formatted_street_address, address.city, address.state, address.zip_code, sep = ", "))
print(df$address)
if (is.na(request$data$structure)) {
df <- df %>%
mutate(structure.year_built = NA, structure.beds_count = NA, structure.baths = NA, structure.heating_type = NA, structure.heating_fuel_type = NA, structure.air_conditioning_type = NA, structure.total_area_sq_ft = NA)
}
if (is.na(request$data$valuation)) {
df <- df %>%
mutate(valuation.value = NA)
}
if (is.na(request$data$owner)) {
df <- df %>%
mutate(owner.owner_occupied = NA)
}
df <- df %>% select(c(address,
year_built = structure.year_built,
bed_count = structure.beds_count,
bath_count = structure.baths,
heating_type = structure.heating_type,
heatfuel_type = structure.heating_fuel_type,
ac_type = structure.air_conditioning_type,
area_sqft = structure.total_area_sq_ft,
prop_value = valuation.value,
own_occupied = owner.owner_occupied))
}
return(df)
})
estated_ieua_1to5 <- do.call(smartbind, df_list)
View(estated_ieua_1to5)
df_list <- lapply(6:nrow(ieua), function(i) {
request <- GET(url = path,
query = list(
token = token,
street_address = ieua$installation_address[i],
city = ieua$installation_city[i],
state = ieua$installation_state[i],
zip_code = ieua$installation_zip[i]
)) %>%
content(as = "text", encoding = "UTF-8") %>%
fromJSON(flatten = FALSE) %>%
simple_rapply(function(x) if (is.null(x)) NA else x)
if (length(request) < 3) {
df <- data.frame(matrix(data = "error", nrow = 1, ncol = 10,  dimnames = list(c("row"), c("address", "year_built", "bed_count", "bath_count", "heating_type", "heatfuel_type", "ac_type", "area_sqft", "prop_value", "own_occupied"))))
} else if (is.na(request$data)) {
df <- data.frame(matrix(data = request$warnings$code, nrow = 1, ncol = 10, dimnames = list(c("row"), c("address", "year_built", "bed_count", "bath_count", "heating_type", "heatfuel_type", "ac_type", "area_sqft", "prop_value", "own_occupied"))))
} else {
df <- request$data[c(2, 4, 5, 9)] %>%
unlist() %>%
t() %>%
data.frame() %>%
mutate(address = paste(address.formatted_street_address, address.city, address.state, address.zip_code, sep = ", "))
print(df$address)
if (is.na(request$data$structure)) {
df <- df %>%
mutate(structure.year_built = NA, structure.beds_count = NA, structure.baths = NA, structure.heating_type = NA, structure.heating_fuel_type = NA, structure.air_conditioning_type = NA, structure.total_area_sq_ft = NA)
}
if (is.na(request$data$valuation)) {
df <- df %>%
mutate(valuation.value = NA)
}
if (is.na(request$data$owner)) {
df <- df %>%
mutate(owner.owner_occupied = NA)
}
df <- df %>% select(c(address,
year_built = structure.year_built,
bed_count = structure.beds_count,
bath_count = structure.baths,
heating_type = structure.heating_type,
heatfuel_type = structure.heating_fuel_type,
ac_type = structure.air_conditioning_type,
area_sqft = structure.total_area_sq_ft,
prop_value = valuation.value,
own_occupied = owner.owner_occupied))
}
return(df)
})
estated_ieua_therest <- do.call(smartbind, df_list)
View(estated_ieua_therest)
estated_ieua_all <- rbind(estated_ieua_1to5, estated_ieua_therest)
write.csv(estated_ieua_all, "data/processed/estated_ieua.csv")
library(tigris)
library(tidycensus)
library(tidyverse)
library(magrittr)
library(sf)
library(leaflet)
options(tigris_class = "sf")
options(tigris_use_cache = TRUE)
census_api_key("0ce53e1ad57e9d3f9f276464e121cc40db4312ac")
census_api_key("0ce53e1ad57e9d3f9f276464e121cc40db4312ac", instlal = TRUE)
census_api_key("0ce53e1ad57e9d3f9f276464e121cc40db4312ac", install = TRUE)
# loading CA block groups
cal_bg <- block_groups(state = "CA", cb = TRUE)
# read in data files
scv <- read.csv("data/processed/scv_gc.csv")
ieua <- read.csv("data/processed/turf_gc.csv")
View(cal_bg)
library(geojsonio)
# reading in shapefiles for cities
scv <- geojson_read("data/processed/scv_boundary.geojson")
# reading in shapefiles for cities
scv <- geojson_read("data/processed/scv_boundary.geojson")
?geojson_read
# reading in shapefiles for cities
scv <- geojson_read("data/processed/scv_boundary.geojson", parse = TRUE)
# reading in shapefiles for cities
scv <- geojson_read("data/processed/scv_boundary.geojson", parse = TRUE, what = "sp")
# reading in shapefiles for cities
scv <- geojson_read("data/processed/scv_boundary.geojson", parse = TRUE, what = "sf")
# reading in shapefiles for cities
scv <- geojson_read("data/processed/scv_boundary.geojson", parse = TRUE, what = "sp") %>%
st_as_sf()
View(scv)
ieua <- geojson_read("data/processed/ieua_servicearea.geojson", parse = TRUE, what = "sp") %>%
st_as_sf()
ieua_cities <- geojson_read("data/processed/ieuq_cities.geojson", parse = TRUE, what = "sp") %>%
st_as_sf()
ieua_cities <- geojson_read("data/processed/ieua_cities.geojson", parse = TRUE, what = "sp") %>%
st_as_sf()
# checking projections
st_crs(cal_bg) == st_crs(scv)
# checking projections
st_crs(cal_bg)
st_crs_ieua
st_crs(ieua)
# transforming all spatial objects to EPSG 3857 (for web mapping)
?st_transform
# transforming all spatial objects to EPSG 3857 (for web mapping)
lapply(c(cal_bg, scg, ieua, ieua_cities), function(x) {
assign(x, st_transform(x, crs = 3857))
})
# transforming all spatial objects to EPSG 3857 (for web mapping)
lapply(c(cal_bg, scv, ieua, ieua_cities), function(x) {
assign(x, st_transform(x, crs = 3857))
})
t <- st_transform(x, crs = 3857)
# transforming all spatial objects to EPSG 3857 (for web mapping)
lapply(c(cal_bg, scv, ieua, ieua_cities), function(x) {
t <- st_transform(x, crs = 3857)
})
?mget
?get
test <- c(cal_bg, scv, ieua, ieua_cities)
View(test)
test <- list(cal_bg, scv, ieua, ieua_cities)
# transforming all spatial objects to EPSG 3857 (for web mapping)
lapply(list(cal_bg, scv, ieua, ieua_cities), function(x) {
st_transform(x, crs = 3857)
})
# transforming all spatial objects to EPSG 3857 (for web mapping)
lapply(list(cal_bg, scv, ieua, ieua_cities), function(x) {
t <- st_transform(x, crs = 3857)
assign(x, t)
})
?lappluy
?lapply
# transforming all spatial objects to EPSG 3857 (for web mapping)
df_list <- lapply(list(cal_bg, scv, ieua, ieua_cities), function(x) {
st_transform(x, crs = 3857)
})
test <- unlist(df_list)
rm(test)
?eapply
?unlist
View(df_list)
?do.call
do.call(st_transform(crs = 3857), list(cal_bg, scv, ieua, ieua_cities))
cal_bg <- block_groups(state = "CA", cb = TRUE) %>%
st_transform(crs = 3857)
# reading in shapefiles for cities
scv <- geojson_read("data/processed/scv_boundary.geojson", parse = TRUE, what = "sp") %>%
st_as_sf() %>%
st_transform(crs = 3857)
ieua <- geojson_read("data/processed/ieua_servicearea.geojson", parse = TRUE, what = "sp") %>%
st_as_sf() %>%
st_transform(crs = 3857)
ieua_cities <- geojson_read("data/processed/ieua_cities.geojson", parse = TRUE, what = "sp") %>%
st_as_sf() %>%
st_transform(crs = 3857)
st_crs(ieua)
# clipping CA block groups to respective shape files
?sc_intersection
# clipping CA block groups to respective shape files
?st_intersection
# clipping CA block groups to respective shape files
scv_bg <- st_intersection(cal_bg, scv)
View(scv_bg)
# clipping CA block groups to respective shape files
scv_bg <- st_intersection(cal_bg, scv) %>%
select(1:4)
ieua_bg <- st_intersection(cal_bg, ieua) %>%
select(1:4)
View(scv)
View(ieua)
View(ieua_bg)
View(ieua)
?get_acs
library(tigris)
library(tidycensus)
library(tidyverse)
library(magrittr)
library(sf)
library(leaflet)
library(geojsonio)
options(tigris_class = "sf")
options(tigris_use_cache = TRUE)
census_api_key("0ce53e1ad57e9d3f9f276464e121cc40db4312ac", install = TRUE)
# reading in shapefiles for cities
scv <- geojson_read("data/processed/scv_boundary.geojson", parse = TRUE, what = "sp") %>%
st_as_sf() %>%
st_transform(crs = 3857)
ieua <- geojson_read("data/processed/ieua_servicearea.geojson", parse = TRUE, what = "sp") %>%
st_as_sf() %>%
st_transform(crs = 3857)
ieua_cities <- geojson_read("data/processed/ieua_cities.geojson", parse = TRUE, what = "sp") %>%
st_as_sf() %>%
st_transform(crs = 3857)
?get_acs
# retrieving census data, with geometry
# total white, total pop, median household income, aggregate # of vehicles used for commuting, no. of households, median age, owner-occupied, bachelor's, graduate
ca_acs <- get_acs(geography = "block group", variables =c("B02001_002", 	"B01003_001", "B19019_001", "B08015_001", "B08201_001", "B01002_001", "B25106_002", "B06009_005", "B06009_006"), state = "CA", geometry = TRUE, output = "wide")
View(ca_acs)
ca_acs %<>% st_transform(crs = 3857)
# clipping CA block groups to repsective shape files
scv_bg <- st_intersection(cal_acs, scv)
ieua_bg <- st_intersection(cl_acs, ieua) %>%
select(1:4)
# clipping CA block groups to repsective shape files
scv_bg <- st_intersection(ca_acs, scv)
View(scv_bg)
colnames(scv_bg)
# clipping CA block groups to repsective shape files
scv_bg <- st_intersection(ca_acs, scv) %>%
select(1:20)
names(scv_bg) <- c("GEOID", "NAME", "total_white", "tw_moe", "total_pop", "tp_moe", "mhi", "mhi_moe", "vehicles", "veh_moe", "no_house", "nh_moe", "med_age", "ma_moe", "owner_occ", "oo_moe", "bach", "bach_moe", "grad", "grad_moe", "geometry")
View(scv_bg)
?get_acs
# retrieving census data, with geometry
# total white, total pop, median household income, aggregate # of vehicles used for commuting, no. of households, median age, owner-occupied, bachelor's, graduate
ca_acs <- get_acs(geography = "block group", year = 2017, variables =c("B02001_002", 	"B01003_001", "B19019_001", "B08015_001", "B08201_001", "B01002_001", "B25106_002", "B06009_005", "B06009_006"), state = "CA", geometry = TRUE, output = "wide") %>%
st_transform(crs = 3857)
# retrieving census data, with geometry
# total white, total pop, median household income, aggregate # of vehicles used for commuting, no. of households, median age, owner-occupied, bachelor's, graduate
ca_acs <- get_acs(geography = "block group", year = 2017, variables =c("B09019"), state = "CA", geometry = TRUE, output = "wide") %>%
st_transform(crs = 3857)
rlang::last_error()
# retrieving census data, with geometry
# total white, total pop, median household income, aggregate # of vehicles used for commuting, no. of households, median age, owner-occupied, bachelor's, graduate
ca_acs <- get_acs(geography = "block group", variables =c("B09019_001"), state = "CA", geometry = TRUE, output = "wide") %>%
st_transform(crs = 3857)
# retrieving census data for LA county
# first, loading variable list
v18 <- load_variables(2018, "acs5", cache = TRUE)
View(v18)
# retrieving census data, with geometry
# total white, total pop, median household income, aggregate # of vehicles used for commuting, no. of households, median age, owner-occupied, bachelor's, graduate
ca_acs <- get_acs(geography = "block group", variables =c("B09019_001"), state = "CA", geometry = TRUE, output = "wide") %>%
st_transform(crs = 3857)
View(ca_acs)
# retrieving census data, with geometry
# total white, total pop, total above bach above 25, totla above 25, housing units
ca_acs <- get_acs(geography = "block group", variables = c("B02001_002", 	"B01003_001", "B09019_001", 	"B15012_001", "B15093_001", "B25001_001"), state = "CA", geometry = TRUE, output = "wide") %>%
st_transform(crs = 3857)
# retrieving census data, with geometry
# total white, total pop, total above bach above 25, totla above 25, housing units "B25001_001"
ca_acs <- get_acs(geography = "block group", variables = c("B02001_002", 	"B01003_001", "B09019_001", 	"B15012_001", "B15093_001"), state = "CA", geometry = TRUE, output = "wide") %>%
st_transform(crs = 3857)
# retrieving census data, with geometry
# total white, total pop, total above bach above 25, totla above 25, housing units "B25001_001"
ca_acs <- get_acs(geography = "block group", variables = c("B02001_002", 	"B01003_001", "B09019_001", 	"B15012_001"), state = "CA", geometry = TRUE, output = "wide") %>%
st_transform(crs = 3857)
View(ca_acs)
